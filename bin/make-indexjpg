#!/usr/bin/perl -w

use strict;
use Getopt::Std;
use POSIX qw(ceil);

my %opt = (
	w => 120,
	h => 90,
	b => 1,
	n => 6,
	B => "white",
	m => 0,
	f => ".index",
	H => "",
	q => 0,
	s => 0,
	t => "",
	T => "",
	v => 0,
);

getopts('w:h:H:b:n:B:mf:qst:T:v', \%opt);

exit 0 unless @ARGV;

@ARGV = sort @ARGV if $opt{s};

my @files = @ARGV;
@files = map {
	if($opt{t}) {
		if(-f "$opt{t}/$_") { # look for thumbs
			$_ = "$opt{t}/$_";
		} elsif (/(.*)\.(gif|bmp)$/) {
			$_ = "$opt{t}/$1.jpg" if -f "$opt{t}/$1.jpg";
		}
	}
	s/\.gif$/.gif[0]/; # extract first frame from from animated gifs
	s/'/'\\''/g; # quote '
	$_ = "'$_'"; # quote filenames
} @files;
my $files = join " ", @files;

print "Schreibe" unless $opt{q};
unless($opt{m}) {
	my $rows = ceil (scalar (@files) / $opt{n});
	my $command =  "montage -geometry $opt{w}x$opt{h}+$opt{b}+$opt{b} -background '$opt{B}' -tile $opt{n}x$rows -adjoin $files $opt{f}.jpg";
	print "$command\n" if $opt{v};
	print " $opt{f}.jpg..." unless $opt{q};
	system $command;
}

my $map = "$opt{f}-map.html";
print " $map...\n" unless $opt{q};
open MAP, ">$map" or die "$map: $!";

my $name = $opt{f};
$name =~ s!.*/!!;

print MAP "<map name=\"$name\">\n";
my $n = 0;
foreach (@ARGV) {
	my $left = ($n % $opt{n}) * ($opt{w}+2*$opt{b});
	my $right = $left + ($opt{w}+$opt{b});
	my $top = int($n / $opt{n}) * ($opt{h}+2*$opt{b});
	my $bottom = $top + ($opt{h}+$opt{b});
	my $href = $_;
	my $title = $_;
	if($opt{H}) {
		eval "\$href =~ $opt{H}";
	}
	if($opt{T}) {
		eval "\$title =~ $opt{T}";
	}
	print MAP " <area shape=rect coords=\"$left,$top,$right,$bottom\" href=\"$href\" alt=\"$title\" title=\"$title\">\n";
	$n++;
}
print MAP "</map>\n";
print MAP "<img src=\"$name.jpg\" usemap=\"#$name\" border=\"0\">\n";
close MAP;


=head1 NAME

make-indexjpg - creates thumbnail image and corresponding HTML map file

=head1 SYNOPSIS

B<make-indexjpg>
[I<-w> B<x>]
[I<-h> B<y>]
[I<-b> B<b>]
[I<-n> B<n>]
[I<-B> B<color>]
[I<-m>]
[I<-f> B<name>]
[I<-H> B<expr>]
[I<-T> B<expr>]
[I<-q>]
[I<-s>]
[I<-t> B<directory>]
[I<-v>]
B<images> ...

=head1 DESCRIPTION

B<make-indexjpg> takes a list of image file names and uses B<montage> to create
an image with thumbnails. A correspoding HTML map file can be used to make the
index image clickable.

=head1 OPTIONS

=head2 I<-w> B<x> I<-h> B<y>

The thumbnails inside the index image will have size B<x> * B<y> pixels.
[120 * 90]

=head2 I<-b> B<b>

Put a border of B<b> pixels around each image. [1]

=head2 I<-n> B<n>

Arrange the thumbnails in a grid with B<n> columns. [6]

=head2 I<-B> B<color>

Background color to use. [white]

=head2 I<-m>

Only generate the B<name>-map.html file, omit B<name>.jpg. [generate both]

=head2 I<-f> B<name>

Name the index image B<name>.jpg and the HTML map file B<name>-map.html.
[.index.jpg, .index-map.html]

=head2 I<-H> B<expr>

Apply perl regexp to filenames before writing href attributes.
Example: -H 's/(.*)/images\/$1/'.
[do not]

=head2 I<-T> B<expr>

Apply perl regexp to filenames before writing alt and title attributes.
Example: -T 's/(.*)\.jpg/Picture of $1/'.
[do not]

=head2 I<-q>

Be quiet. [print names of files written]

=head2 I<-s>

Sort the list of images given. [do not]

=head2 I<-t> B<directory>

Look for precomputed thumbnails in B<directory>. Use this to speed up the
B<montage> call. [no thumbnails]

=head2 I<-v>

Be verbose, print commands as they are executed. [do not]

=head1 AUTHOR

Christoph Berg <cb@cs.uni-sb.de>
