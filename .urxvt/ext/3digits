#! perl

sub my_resource {
   my $self = shift;
   $self->x_resource ("$self->{name}.$_[0]");
}

# turn a rendition spec in the resource into a sub that implements it on $_
sub parse_rend {
   my ($self, $str) = @_;
   my ($mask, $fg, $bg, $failed) = $str ? urxvt::rend2mask($str) 
                                        : (urxvt::RS_Uline, undef, undef, []);
   warn "Failed to parse rendition string: " . join(',', @$failed) if @$failed;
   my @rend;
   push @rend, sub { $_ |= $mask } if $mask;
   push @rend, sub { $_ = urxvt::SET_FGCOLOR($_, $fg) } if defined $fg;
   push @rend, sub { $_ = urxvt::SET_BGCOLOR($_, $bg) } if defined $bg;
   sub {
      for my $s ( @rend ) { &$s };
   }
}

sub on_start {
   my ($self) = @_;

   ($self->{name} = __PACKAGE__) =~ s/.*:://;
   $self->{name} =~ tr/_/-/;

   my @matchers;
   $self->{rend} = $self->parse_rend($self->my_resource("rend"));

   ()
}

sub on_line_update {
   my ($self, $row) = @_;

   # fetch the line that has changed
   my $line = $self->line ($row);
   my $text = $line->t;

   return if (length($text) > 10000);

   while ($text =~ /\d{5,}/g) {
      my $rend = $line->r;

      # mark all characters as underlined. we _must_ not toggle underline,
      # as we might get called on an already-marked url.
      my $off = 0;
      for (my $i = $+[0] - 1; $i >= $-[0]; $i--) {
         next unless ($off++ % 6 >= 3);
         $_ = $rend->[$i];
         &{$self->{rend}};
         $rend->[$i] = $_;
      }

      $line->r ($rend);
   }
}

# vim:set sw=3 sts=3 et:
